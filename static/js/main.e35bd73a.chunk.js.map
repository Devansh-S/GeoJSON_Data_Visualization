{"version":3,"sources":["serviceWorker.js","components/map/MapControls.jsx","components/map/Map.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","MapControls","props","handleStyleClick","event","changeStyle","handleTypeClick","state","styles","name","link","types","className","this","map","layer","idx","onClick","type","Component","Map","handleStyleBtnClick","styleID","setState","style","swapStyle","lat","lng","zoom","mapboxgl","accessToken","activeType","container","mapContainer","center","on","a","addSource","addLayer","currentStyle","getStyle","json","newStyle","sources","Object","assign","labelIndex","layers","findIndex","el","id","appLayers","filter","source","reverse","forEach","splice","setStyle","Layers","Types","changeType","handleTypeBtnClick","ref","React","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e35bd73a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\nimport './mapControls.scss';\n\nclass MapControls extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state={\n            styles: [{name: 'Dark', link: 'dark-v10'}, \n                    {name: 'Satellite', link: 'satellite-v9'},\n                    {name: 'Outdoors',link: 'outdoors-v11'},\n                    {name: 'Light', link: 'light-v10'},\n                    {name: 'Streets', link: 'streets-v11'}],\n    \n            types: [{name: 'all', link: 'mapbox://styles/mapbox/all'},\n                    {name: 'Flora', link: 'mapbox://styles/mapbox/Flora'}, \n                    {name: 'Fauna', link: 'mapbox://styles/mapbox/Fauna'},\n                    {name: 'Disturbances',link: 'mapbox://styles/mapbox/Disturbances'}],  \n        }\n    }  \n\n    handleStyleClick = (event) => {\n        this.props.changeStyle(event)\n    }\n\n    handleTypeClick = (event) => {\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"dropdown\">\n                    <button className=\"dropbtn\">Styles</button>\n                    <div className=\"dropdown-content\">\n                        {this.state.styles.map( (layer, idx) => {\n                            return <p name={layer.link} onClick={ () => this.handleStyleClick(layer) }>{layer.name}</p>\n                        })}\n                    </div>\n                </div>\n\n                <div className=\"dropdown\">\n                    <button className=\"dropbtn\">Type</button>\n                    <div className=\"dropdown-content\">\n                        {this.state.types.map(type => {\n                            return <p name={type.link} onClick={ () => this.handleTypeClick(type) }>{type.name}</p>\n                        })}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n};\n\nexport default MapControls;","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport './site.scss';\nimport './MapControls';\nimport MapControls from './MapControls';\nimport './mapControls.scss';\nimport { json } from 'd3-request';\n\n\n\n\nclass Map extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            lat: 26.4499,\n            lng: 80.3319,\n            zoom: 4,\n            style: 'mapbox://styles/mapbox/dark-v10',\n            type: 'all',   \n        }\n    };\n\n    componentDidMount() {\n        mapboxgl.accessToken = 'pk.eyJ1IjoiZGV2NTk2IiwiYSI6ImNrOHJsaHY5cDAzcGQzbHBqc21vaWsxcnMifQ.B5rBbh4fDvTHEqQHrGU_Bg';\n        const {lat, lng, zoom, style, activeType} = this.state\n        this.map = new mapboxgl.Map({\n            container: this.mapContainer,\n            style: style,\n            center: [lng, lat],\n            zoom: zoom\n            });\n\n        this.map.on('load', async () => {\n          this.map.addSource('earthquakes', {  'type': 'geojson',\n                                          'data':\n                                          'https://raw.githubusercontent.com/Devansh-S/shapefiles/master/india/assembly/india_2012-17_AC.json'\n                                      }\n                      );\n          this.map.addLayer({\n                          'id': 'earthquakes',\n                          'type': 'line',\n                          'source': 'earthquakes',\n                          'layout': {\n                                      'line-join': 'round',\n                                      'line-cap': 'round'\n                                  },\n                          'paint': {\n                                      'line-color': 'rgb(255,128,0)',\n                                      'line-width': 2\n                                  }\n                      }\n                  )\n          });\n    }\n\n    swapStyle(styleID) {\n      var currentStyle = this.map.getStyle();\n      json(`https://api.mapbox.com/styles/v1/mapbox/${styleID}?access_token=${mapboxgl.accessToken}`, (newStyle) => {\n        newStyle.sources = Object.assign({}, currentStyle.sources, newStyle.sources); // ensure any sources from the current style are copied across to the new style\n        var labelIndex = newStyle.layers.findIndex((el) => { // find the index of where to insert our layers to retain in the new style\n          return el.id === 'waterway-label';\n        });\n        var appLayers = currentStyle.layers.filter((el) => { // app layers are the layers to retain, and these are any layers which have a different source set\n          return (el.source && el.source !== \"mapbox://mapbox.satellite\" && el.source !== \"composite\");\n        });\n        appLayers.reverse(); // reverse to retain the correct layer order\n        appLayers.forEach((layer) => {\n          newStyle.layers.splice(labelIndex, 0, layer); // inset these layers to retain into the new style\n        });\n        this.map.setStyle(newStyle); // now setStyle\n      });\n    }\n\n    handleStyleBtnClick = event => {\n      let styleID = event.link;\n      this.setState({style: styleID})\n      this.swapStyle(styleID)\n    }\n\n    render() {\n        return (\n            <div>\n                <MapControls Layers={this.state.styles} Types={this.state.types} changeStyle={this.handleStyleBtnClick} changeType={this.handleTypeBtnClick}/>\n                <div ref={el => this.mapContainer = el} className='mapContainer' />\n            </div>\n        )\n    }\n};\n\nexport default Map;","import React from \"react\";\nimport \"./App.scss\";\nimport Map from \"./components/map/Map\";\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  \n\n  render() {\n    return (\n    \t\t<Map />\n    ) \n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport mapboxgl from 'mapbox-gl';\n\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiZGV2NTk2IiwiYSI6ImNrOHJsaHY5cDAzcGQzbHBqc21vaWsxcnMifQ.B5rBbh4fDvTHEqQHrGU_Bg';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}